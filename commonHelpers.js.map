{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst btnStart = document.querySelector(`[data-start]`);\nconst inputId = document.querySelector('#datetime-picker');\nconst dataDays = document.querySelector(`[data-days]`);\nconst dataHours = document.querySelector(`[data-hours]`);\nconst dataMinutes = document.querySelector(`[data-minutes]`);\nconst dataSeconds = document.querySelector(`[data-seconds]`);\nlet userSelectedDate;\nlet timerInterval;\n\nbtnStart.disabled = true;\n\nconst initializeDateTimePicker = () => {\n  const options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n      const selectedDate = selectedDates[0];\n      if (selectedDate < new Date()) {\n        iziToast.error({\n          title: 'Error',\n          message: 'Please choose a date in the future',\n        });\n      } else {\n        userSelectedDate = selectedDate;\n        localStorage.setItem(\n          'userSelectedDate',\n          userSelectedDate.toISOString()\n        );\n      }\n      btnStart.disabled = selectedDate < new Date();\n    },\n  };\n\n  flatpickr(inputId, options);\n\n  const savedDate = localStorage.getItem('userSelectedDate');\n  if (savedDate) {\n    userSelectedDate = new Date(savedDate);\n    inputId._flatpickr.setDate(userSelectedDate);\n  }\n};\n\nconst convertMs = ms => {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const mins = Math.floor(((ms % day) % hour) / minute);\n  const secs = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, mins, secs };\n};\n\ninitializeDateTimePicker();\n\nconst dateIsOk = () => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (\n        userSelectedDate &&\n        userSelectedDate.getTime() > new Date().getTime()\n      ) {\n        resolve();\n      } else {\n        reject();\n      }\n    }, 0);\n  });\n};\n\nbtnStart.addEventListener('click', () => {\n  dateIsOk()\n    .then(() => {\n      btnStart.disabled = true;\n      inputId.disabled = true;\n      localStorage.setItem('timerRunning', true);\n\n      // Запуск таймера\n      timerInterval = setInterval(() => {\n        const currentTime = Date.now();\n        const deltaTime = userSelectedDate - currentTime;\n        if (deltaTime <= 0) {\n          clearInterval(timerInterval);\n          updateClockface({ days: '00', hours: '00', mins: '00', secs: '00' });\n        } else {\n          const time = convertMs(deltaTime);\n          updateClockface(time);\n        }\n      }, 1000);\n    })\n    .catch(() => {\n      btnStart.disabled = true;\n    });\n});\n\nconst timerRunning = localStorage.getItem('timerRunning');\nif (timerRunning) {\n  btnStart.disabled = true;\n  inputId.disabled = true;\n  timerInterval = setInterval(() => {\n    const currentTime = Date.now();\n    const deltaTime = userSelectedDate - currentTime;\n    if (deltaTime <= 0) {\n      clearInterval(timerInterval);\n      updateClockface({ days: '00', hours: '00', mins: '00', secs: '00' });\n    } else {\n      const time = convertMs(deltaTime);\n      updateClockface(time);\n    }\n  }, 0);\n}\n\nfunction updateClockface({ days, hours, mins, secs }) {\n  dataDays.textContent = pad(days);\n  dataHours.textContent = pad(hours);\n  dataMinutes.textContent = pad(mins);\n  dataSeconds.textContent = pad(secs);\n}\n\nfunction pad(value) {\n  return String(value).padStart(2, '0');\n}\n"],"names":["btnStart","inputId","dataDays","dataHours","dataMinutes","dataSeconds","userSelectedDate","timerInterval","initializeDateTimePicker","flatpickr","selectedDates","selectedDate","iziToast","savedDate","convertMs","ms","days","hours","mins","secs","dateIsOk","resolve","reject","currentTime","deltaTime","updateClockface","time","timerRunning","pad","value"],"mappings":"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"}